snippet class "Class outline" b
class $1 {
	$0
}
endsnippet

snippet for "For-in loop" b
for(var $1 in ${2:$1s}) {
	$0
}
endsnippet

snippet try "Try/catch block" b
try {
	${1:${VISUAL}}
} catch(${2:e}${3:, st}) {
	$4
}
endsnippet

snippet set "Field setter" b
set $1($2 $1) {
	${3:_$1 = $1;}
}
endsnippet

snippet get "Simple field getter" b
$1 get $2 => ${3:_$2};
endsnippet

snippet getl "Field with lazy initialization" b
$1 _$2;
${1} get ${2} => _$2 ?? ${3:_init${2/.*/\u$0/}()};
endsnippet

snippet main
void main() {
	runApp(${1:createApp()});
}
endsnippet

snippet importfm "flutter/material.dart"
import 'package:flutter/material.dart'${1: hide Page};
endsnippet

snippet importfw "flutter/widgets.dart"
import 'package:flutter/widgets.dart'${1: hide Action};
endsnippet

snippet importff "flutter/foundation.dart"
import 'package:flutter/foundation.dart';
endsnippet

snippet importfish
import 'package:fish_redux/fish_redux.dart';
endsnippet

snippet MaterialApp 
import 'package:fish_redux/fish_redux.dart';
import 'package:flutter/material.dart' hide Page; // 和fish_redux 重复

Widget ${1:createApp}() {
import 'package:fish_redux/fish_redux.dart';
import 'package:flutter/material.dart' hide Page; // 和fish_redux 重复

Widget createApp() {
	final AbstractRoutes routes = PageRoutes(pages: <String, Page<Object, dynamic>>{});

	return MaterialApp(
			title: 'FishDemo',
			theme: ThemeData(
				primarySwatch: Colors.pink
				),
			onGenerateRoute: (RouteSettings settings) {
			return MaterialPageRoute<Object>(builder: (BuildContext context){
					return routes.buildPage(settings.name, settings.arguments);
					});
			}
			);
}
endsnippet

snippet edgei
EdgeInsets.fromLTRB(${1:0}, ${2:0}, ${3:0}, ${4:0})
endsnippet

snippet scaffold
	return Scaffold(
		appBar: AppBar(
			backgroundColor: Colors.pink,
			title: Text('${1:页面标题}')
		),
		body: Container(
			child: Center(
				child: RaisedButton(
					padding: EdgeInsets.fromLTRB(40, 0, 40, 0),
					color: Colors.green,
					child: Text("进入", style: TextStyle(color: Colors.white)),
					onPressed: () {
							// TODO 点击事件
					}
				)
			)
		)
	);
endsnippet

#将首字母转为小写 ${1/\w+\s*/\l$0/}
#将首字母转为大写 ${1/\w+\s*/\u$0/}
snippet action
static Action on${1:ActionName}() {
	return const Action(${2:ClassAction}.${1/\w+\s*/\l$0/});
}
endsnippet

snippet onaction
void _on${1:ActionName}(Action action, Context<HomeState> ctx) {
	$0
}
endsnippet

snippet effect
${1:Grid}Action.${2:actionName}: _on${2/\w+\s*/\u$0/},
endsnippet

snippet oneffect
void _on${1:effectName}(Action action, Context<${2:Grid}State> ctx) {
	ctx.dispatch($2ActionCreator.${3:onLoadData}());
}
endsnippet

snippet onreducer
${1:Grid}State _on${2:loadData} ($1State state, Action action) {
	final $1State newState = state.clone();
	return newState;
}
endsnippet

snippet p
print(${1:'msg'});
endsnippet

snippet pl
println(${1:'msg'});
endsnippet

snippet navn
	Navigator.of(ctx.context).pushNamed('${1:grid_page}', arguments: ${2:null});
endsnippet

snippet cw
children: <Widget>[
	$0
]
endsnippet

snippet stateful
class ${1:TapboxA} extends StatefulWidget {
	String title = '';

	$1({Key key, this.title}) : super(key: key);

	@override
	_$1State createState() => new _$1State(title: this.title);
}

class _$1State extends State<$1> {
	String title = '';
	bool isShow = true;

	$1({Key key, this.title}) : super(key: key);

	// TODO
	void toggleShow() {
		setState((){
			isShow = !isShow;
		});
	}

	@override
	void initState() {
		super.initState();
		print("执行$1State的init方法");
	}

	@override
	void didChangeDependencies() {
		// TODO: implement didChangeDependencies
		super.didChangeDependencies();
		print("执行$1State的didChangeDependencies方法");
	}

	@override
	Widget build(BuildContext context) {
		return Container();
	}

	@override
	void didUpdateWidget($1Widget oldWidget) {
		super.didUpdateWidget(oldWidget);
		print("执行$1State的didUpdateWidget方法");
	}

	@override
	void dispose() {
		super.dispose();
		print("执行MyCounterState的dispose方法");
	}
}
endsnippet

snippet stateless
class ${1:TapboxB} extends StatelessWidget {
	$1({Key key}) : super(key: key);

	Widget build(BuildContext context) {
		return Container();
	}
}
endsnippet

snippet gridview
new GridView.count(
		crossAxisCount: 2, // 列数
		crossAxisSpacing: 20.0, // 左右间隔
		mainAxisSpacing: 20.0, // 上下间隔
		childAspectRatio: 1, // 宽高比
		padding: EdgeInsets.all(20),
		children: new List.generate(state.models.length, (index) {
			return Center(
					child: Card(
						color: Colors.lightBlueAccent,
						child: InkWell(
							splashColor: Colors.blue.withAlpha(100),
							onTap: (){
								// 点击事件
								dispatch(GridActionCreator.onOpenList(index));
							},
							child: Container(
								width: 200,
								height: 200,
								child: Center(
									child: Text(state.models[index].name),
								)
							)
						)
					)
				);
		})
)
endsnippet

snippet img
Image(
	image: ${1: AssetImage|NetworkImage}("${2:images/avatar.png}"),
	width: ${3:100.0}
)
endsnippet

snippet inst
class ${1:NavigationService} {
	factory $1.getInstance() => _getInstance();

	$1._internal();

	static $1 _instance;

	static $1 _getInstance() {
		if (_instance == null) {
			_instance = new $1._internal();
		}
		return _instance;
	}
}
endsnippet

snippet showabout
showAboutDialog( context: context,
	applicationIcon: Image.asset(
		'images/bird.png',
		height: 100,
		width: 100,
		),
	applicationName: '应用程序',
	applicationVersion: '1.0.0',
	applicationLegalese: 'copyright 老孟，一枚有态度的程序员',
	children: <Widget>[
	Container(
		height: 30,
		color: Colors.red,
		),
	Container(
		height: 30,
		color: Colors.blue,
		),
	Container(
		height: 30,
		color: Colors.green,
		)
	],
);
endsnippet

snippet enum
enum ${1:className} {
	${2:apple},
	${3:orange} 
}
endsnippet

snippet mpr
new MaterialPageRoute(
	builder: (BuildContext context) {
		return ${1:TestPage()};
	}
)
endsnippet

snippet npmpr
Navigator.of(context).push(
	new MaterialPageRoute(
		builder: (BuildContext context) {
			return ${1:TestPage()};
		}
	)
).then((value) {
	// 获取上一个页面的数据
});
endsnippet
